using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.UI;
using Windows.Media;
using Windows.UI.Xaml.Shapes;
using ProjectProposal;
using LogicTier;
using Windows.UI.Popups;


namespace LogicTier
{
    public class Obstacle
    {
        //field variable
        private Rectangle _obsticle;
        /// <summary>
        /// Constructor for obstacle class
        /// </summary>
        public Obstacle()
        {        
            //initalize field
            _obsticle = new Rectangle();         
        }
     
        /// <summary>
        /// Creates obstacle
        /// </summary>
        /// <returns>Rectangle generated by obstacle class</returns>
        public Rectangle createRectangle()
        {
            //sets the graddient colour object
            LinearGradientBrush obstColour = new LinearGradientBrush();
            obstColour.StartPoint = new Point(0, 0.5);
            obstColour.EndPoint = new Point(1, 0.5);

            //set colours
            Color value1 = Colors.Green;
            Color value2 = Colors.LimeGreen;

            //create gradient stop 1
            GradientStop colour1 = new GradientStop();
            colour1.Color = value1;
            colour1.Offset = 0.0;

            //create gradient stop 2
            GradientStop colour2 = new GradientStop();
            colour2.Color = value2;
            colour2.Offset = 0.5;

            //create gradient stop 3
            GradientStop colour3 = new GradientStop();
            colour3.Color = value1;
            colour3.Offset = 1.0;

            //add gradientStops to obstColour
            obstColour.GradientStops.Add(colour1);
            obstColour.GradientStops.Add(colour2);
            obstColour.GradientStops.Add(colour3);
            
            //set the colour of the obsticles
            _obsticle.Fill = obstColour;
            
            //set the horizontal allignment of the obsticle
            _obsticle.HorizontalAlignment = HorizontalAlignment.Left;
            //set the verticle allignment of the obsticle
            _obsticle.VerticalAlignment = VerticalAlignment.Center;

            return _obsticle;
        }

       
        /// <summary>
        /// Creates the size of the obsticle
        /// </summary>
        /// <param name="width">Width of rectangle</param>
        /// <param name="height">height of rectangle</param>
        public void createSize(double width, double height)
        {
            //sets obsticle width
            _obsticle.Width = width;
            //sets obsticle height
            _obsticle.Height = height;
        }
              

    }
}
